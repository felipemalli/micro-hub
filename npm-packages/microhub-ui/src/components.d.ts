/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Event } from "@stencil/core";
export { Event } from "@stencil/core";
export namespace Components {
    interface CoreButton {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default "medium"
         */
        "size": "small" | "medium" | "large";
        /**
          * @default "button"
         */
        "type": "button" | "submit" | "reset";
        /**
          * @default "primary"
         */
        "variant": | "primary"
		| "secondary"
		| "danger"
		| "outline"
		| "ghost"
		| "underline";
    }
    interface CoreInput {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "error": boolean;
        /**
          * @default ""
         */
        "inputId": string;
        /**
          * @default ""
         */
        "name": string;
        /**
          * @default ""
         */
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * @default "large"
         */
        "size": "small" | "large";
        /**
          * @default "text"
         */
        "type": "text" | "email" | "password" | "number" | "tel" | "url";
        /**
          * @default ""
         */
        "value": string;
    }
}
export interface CoreButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCoreButtonElement;
}
export interface CoreInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCoreInputElement;
}
declare global {
    interface HTMLCoreButtonElementEventMap {
        "coreClick": MouseEvent;
    }
    interface HTMLCoreButtonElement extends Components.CoreButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCoreButtonElementEventMap>(type: K, listener: (this: HTMLCoreButtonElement, ev: CoreButtonCustomEvent<HTMLCoreButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCoreButtonElementEventMap>(type: K, listener: (this: HTMLCoreButtonElement, ev: CoreButtonCustomEvent<HTMLCoreButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCoreButtonElement: {
        prototype: HTMLCoreButtonElement;
        new (): HTMLCoreButtonElement;
    };
    interface HTMLCoreInputElementEventMap {
        "coreInput": Event;
        "coreChange": Event;
        "coreFocus": FocusEvent;
        "coreBlur": FocusEvent;
    }
    interface HTMLCoreInputElement extends Components.CoreInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCoreInputElementEventMap>(type: K, listener: (this: HTMLCoreInputElement, ev: CoreInputCustomEvent<HTMLCoreInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCoreInputElementEventMap>(type: K, listener: (this: HTMLCoreInputElement, ev: CoreInputCustomEvent<HTMLCoreInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCoreInputElement: {
        prototype: HTMLCoreInputElement;
        new (): HTMLCoreInputElement;
    };
    interface HTMLElementTagNameMap {
        "core-button": HTMLCoreButtonElement;
        "core-input": HTMLCoreInputElement;
    }
}
declare namespace LocalJSX {
    interface CoreButton {
        /**
          * @default false
         */
        "disabled"?: boolean;
        "onCoreClick"?: (event: CoreButtonCustomEvent<MouseEvent>) => void;
        /**
          * @default "medium"
         */
        "size"?: "small" | "medium" | "large";
        /**
          * @default "button"
         */
        "type"?: "button" | "submit" | "reset";
        /**
          * @default "primary"
         */
        "variant"?: | "primary"
		| "secondary"
		| "danger"
		| "outline"
		| "ghost"
		| "underline";
    }
    interface CoreInput {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "error"?: boolean;
        /**
          * @default ""
         */
        "inputId"?: string;
        /**
          * @default ""
         */
        "name"?: string;
        "onCoreBlur"?: (event: CoreInputCustomEvent<FocusEvent>) => void;
        "onCoreChange"?: (event: CoreInputCustomEvent<Event>) => void;
        "onCoreFocus"?: (event: CoreInputCustomEvent<FocusEvent>) => void;
        "onCoreInput"?: (event: CoreInputCustomEvent<Event>) => void;
        /**
          * @default ""
         */
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * @default "large"
         */
        "size"?: "small" | "large";
        /**
          * @default "text"
         */
        "type"?: "text" | "email" | "password" | "number" | "tel" | "url";
        /**
          * @default ""
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "core-button": CoreButton;
        "core-input": CoreInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "core-button": LocalJSX.CoreButton & JSXBase.HTMLAttributes<HTMLCoreButtonElement>;
            "core-input": LocalJSX.CoreInput & JSXBase.HTMLAttributes<HTMLCoreInputElement>;
        }
    }
}
